{"version":3,"sources":["App.tsx","button.tsx","list.tsx","index.tsx"],"names":["SortType","Button","children","className","props","type","ListOfGoods","React","memo","goods","map","good","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","visibleGoods","ALPHABET","sort","a","b","localeCompare","LENGTH","length","reverse","console","log","getReorderedGoods","classNames","onClick","ReactDOM","render","document","getElementById"],"mappings":"6KAoBKA,E,6HChBQC,EAA0B,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,UAAcC,EAA3B,wBACrC,gDACEC,KAAK,SACLF,UAAS,iBAAYA,IACjBC,GAHN,aAKGF,MCJQI,EAA+BC,IAAMC,MAChD,gBAAGC,EAAH,EAAGA,MAAH,OACE,6BACGA,EAAMC,KAAI,SAACC,GAAD,OACT,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,WFJFC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGZ,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAmCE,IAAMa,EAAgBN,IAAMC,MAAK,WACtC,MAAgCM,mBAASd,EAASe,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAmBMC,EAjDR,SACEX,EACAO,EACAE,GAGA,IAAME,EAAY,YAAOX,GAmBzB,OAfIO,IAAahB,EAASqB,UACxBD,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAG1CR,IAAahB,EAAS0B,QACxBN,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAGvCT,GACFE,EAAaQ,UAIfC,QAAQC,IAAId,EAAUE,GAEfE,EAwBcW,CAAkBnB,EAAiBI,EAAUE,GAElE,OACE,sBAAKf,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,CACEA,UAAW6B,IACT,UACA,CACE,WAAYhB,IAAahB,EAASqB,WAGtCY,QA7Be,WACrBhB,EAAYjB,EAASqB,WAqBjB,iCAYA,cAAC,EAAD,CACElB,UAAW6B,IACT,aACA,CACE,WAAYhB,IAAahB,EAAS0B,SAGtCO,QArCa,WACnBhB,EAAYjB,EAAS0B,SA6BjB,4BAYA,cAAC,EAAD,CACEvB,UAAW6B,IACT,aACA,CACE,YAAad,IAGjBe,QAAS,WAvCfd,GAAeD,IAgCX,sBAWEA,GAAcF,IAAahB,EAASe,OACpC,cAAC,EAAD,CACEZ,UAAU,4BACV8B,QApDI,WACZhB,EAAYjB,EAASe,MACrBI,GAAc,IAgDR,sBASJ,cAACb,EAAD,CAAaG,MAAOW,UG3H1Bc,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.240a7f49.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { Button } from './button';\nimport { ListOfGoods } from './list';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\n// Use this function in the render method to prepare goods\nfunction getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n\n  if (sortType === SortType.ALPHABET) {\n    visibleGoods.sort((a, b) => a.localeCompare(b));\n  }\n\n  if (sortType === SortType.LENGTH) {\n    visibleGoods.sort((a, b) => a.length - b.length);\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = React.memo(() => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const sortByAlphabet = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  const reverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const visibleGoods = getReorderedGoods(goodsFromServer, sortType, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <Button\n          className={classNames(\n            'is-info',\n            {\n              'is-light': sortType !== SortType.ALPHABET,\n            },\n          )}\n          onClick={sortByAlphabet}\n        >\n          Sort alphabetically\n        </Button>\n\n        <Button\n          className={classNames(\n            'is-success',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </Button>\n\n        <Button\n          className={classNames(\n            'is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={() => reverse()}\n        >\n          Reverse\n        </Button>\n        {(isReversed || sortType !== SortType.NONE) && (\n          <Button\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </Button>\n        )}\n\n      </div>\n      <ListOfGoods goods={visibleGoods} />\n    </div>\n  );\n});\n","import React from 'react';\n\ntype Props = React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const Button: React.FC<Props> = ({ children, className, ...props }) => (\n  <button\n    type=\"button\"\n    className={`button ${className}`}\n    {...props}\n  >\n    {children}\n  </button>\n);\n","import React from 'react';\n\ntype Props = {\n  goods: string[];\n};\n\nexport const ListOfGoods: React.FC<Props> = React.memo(\n  ({ goods }) => (\n    <ul>\n      {goods.map((good) => (\n        <li\n          key={good}\n          data-cy=\"Good\"\n        >\n          {good}\n        </li>\n      ))}\n    </ul>\n  ),\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}